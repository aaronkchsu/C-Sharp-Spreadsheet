// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SimpleSet - Use 'SimpleSetParams' to pass parameters into this method.
        /// </summary>
        public void SimpleSet()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            // Double-Click 'SpreadsheetGUI.exe - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIexeShoListItem, new Point(29, 61));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(60, 5));

            // Type '=B2' in 'CellContents' text box
            uICellContentsEdit.Text = this.SimpleSetParams.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SimpleSetParams.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type '=A1' in 'CellContents' text box
            uICellContentsEdit.Text = this.SimpleSetParams.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SimpleSetParams.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type '=A2' in 'CellContents' text box
            uICellContentsEdit.Text = this.SimpleSetParams.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SimpleSetParams.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(433, 141));

            // Right-Click 'Value' client
            Mouse.Click(uIValueClient, MouseButtons.Right, ModifierKeys.None, new Point(154, 58));
        }
        
        /// <summary>
        /// These better work
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIValueTextEdit = this.UIValueTextWindow.UIValueTextEdit;
            WinEdit uICellNameEdit = this.UIA2Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'ValueText' text box equals '5'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIValueTextEditText, uIValueTextEdit.Text, "NO!");

            // Verify that the 'Text' property of 'CellName' text box equals 'B2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// CloseMethod
        /// </summary>
        public void CloseMethod()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIAxelWindow.UIAxelTitleBar.UICloseButton;
            WinButton uINOButton = this.UISTOOOOPWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(74, 15));
        }
        
        /// <summary>
        /// Yes
        /// </summary>
        public void LetsMakeThisWork()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI.exe - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIexeShoListItem, new Point(48, 17));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(58, 17));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(286, 99));

            // Type '=D4' in 'CellContents' text box
            uICellContentsEdit.Text = this.LetsMakeThisWorkParams.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.LetsMakeThisWorkParams.UICellContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UIA2Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'CellName' text box equals 'D7'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(301, 120));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uIValueTextEdit = this.UIValueTextWindow.UIValueTextEdit;
            #endregion

            // Verify that the 'Text' property of 'ValueText' text box equals '23'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIValueTextEditText, uIValueTextEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIAxelWindow.UIAxelTitleBar.UICloseButton;
            WinButton uINOButton = this.UISTOOOOPWindow.UINOWindow.UINOButton;
            WinButton uICancelButton = this.UISTOOOOPWindow.UICancelWindow.UICancelButton;
            WinControl uISTOOOOPDialog = this.UISTOOOOPWindow.UISTOOOOPDialog;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(8, 15));

            // Move '&No' button to 'Cancel' button
            uICancelButton.EnsureClickable(new Point(31, 14));
            Mouse.StartDragging(uINOButton, new Point(28, 15));
            Mouse.StopDragging(uICancelButton, new Point(31, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(65, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 2));

            // Move 'STOOOOP!!!' Dialog
            Mouse.StartDragging(uISTOOOOPDialog, new Point(226, 120));
            Mouse.StopDragging(uISTOOOOPDialog, 81, -14);

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(22, 11));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinCheckBox uIAwkward2CheckBox = this.UIProgramManagerWindow.UIDesktopList.UIAwkward2CheckBox;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinCheckBox uIPodcastCheckBox = this.UIProgramManagerWindow.UIDesktopList.UIPodcastCheckBox;
            WinWindow uIAxelWindow = this.UIItemWindow.UIAxelWindow;
            WinText uIJohnathonIhaveaspeciText = this.UIGreetingsGoodSirWindow.UIJohnathonIhaveaspeciWindow.UIJohnathonIhaveaspeciText;
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinWindow uITableLayoutPanel1Window = this.UIItemWindow.UIAxelWindow.UIAxelClient.UITableLayoutPanel1Window;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod3Params.ExePath, this.RecordedMethod3Params.AlternateExePath);

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(51, 21));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(177, 137));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(7, 18));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(25, 39));

            // Click 'Axel' window
            Mouse.Click(uIAxelWindow, new Point(773, 123));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(81, 25));

            // Click 'Johnathon, I have a special task for you at hand. ...' label
            Mouse.Click(uIJohnathonIhaveaspeciText, new Point(104, 94));

            // Type '=A2' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod3Params.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod3Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Click 'tableLayoutPanel1' window
            Mouse.Click(uITableLayoutPanel1Window, new Point(145, 136));
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            WinList uIItemsViewList = this.UISaveAsWindow.UIItemsViewWindow.UIItemsViewList;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinPane uIExplorerPanePane = this.UISaveAsWindow.UIExplorerPaneWindow.UIExplorerPanePane;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinComboBox uISaveastypeComboBox = this.UISaveAsWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow1.UIUntitledListItem.UINameEdit;
            #endregion

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(893, 111));

            // Move 'Value' client
            Mouse.StartDragging(uIValueClient, new Point(964, 599));
            Mouse.StopDragging(uIValueClient, -376, -269);

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(303, 278));

            // Select 'Untitledd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod4Params.UIFilenameComboBoxEditableItem;

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(365, 341));

            // Move 'Explorer Pane' pane
            Mouse.StartDragging(uIExplorerPanePane, new Point(719, 355));
            Mouse.StopDragging(uIExplorerPanePane, 1, -8);

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(175, 278));

            // Select '22rera' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod4Params.UIFilenameComboBoxEditableItem1;

            // Type 'e' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod4Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(191, 298));

            // Type 'f' in 'Save as type:' combo box
            Keyboard.SendKeys(uISaveastypeComboBox, this.RecordedMethod4Params.UISaveastypeComboBoxSendKeys, ModifierKeys.None);

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(297, 331));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(533, 304));

            // Type 'aefaef' in 'Save as type:' combo box
            Keyboard.SendKeys(uISaveastypeComboBox, this.RecordedMethod4Params.UISaveastypeComboBoxSendKeys1, ModifierKeys.None);

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(298, 285));

            // Type 'a' in 'Save as type:' combo box
            Keyboard.SendKeys(uISaveastypeComboBox, this.RecordedMethod4Params.UISaveastypeComboBoxSendKeys2, ModifierKeys.None);

            // Select 'efaefaef' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod4Params.UIFilenameComboBoxEditableItem2;

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(373, 342));

            // Click 'Explorer Pane' pane
            Mouse.Click(uIExplorerPanePane, new Point(741, 341));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(15, 13));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(401, 365));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(396, 355));

            // Click 'Explorer Pane' pane
            Mouse.Click(uIExplorerPanePane, new Point(558, 379));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinWindow uITableLayoutPanel1Window = this.UIItemWindow.UIAxelWindow.UIAxelClient.UITableLayoutPanel1Window;
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinWindow uIAxelWindow = this.UIItemWindow.UIAxelWindow;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinCheckBox uISpreadsheetGUIShortcCheckBox = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcCheckBox;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            ApplicationUnderTest WindowSpreadsheet = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");


            // Type '%Invalid' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText;

            // Click 'Axel' window
            Mouse.Click(uIAxelWindow, new Point(834, 481));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(1369, 830));

            // Last mouse action was not recorded.

            // Type 'e' in 'SpreadsheetGUI - Shortcut' check box
            Keyboard.SendKeys(uISpreadsheetGUIShortcCheckBox, this.RecordedMethod5Params.UISpreadsheetGUIShortcCheckBoxSendKeys, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(338, 173));

            // Type 'aaefaefaef' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText1;

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(200, 120));

            // Type '' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText2;

            // Type '{Left}{Left}{Down}{Down}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(148, 184));

            // Type '%Invalid' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText3;

            // Click 'Axel' window
            Mouse.Click(uIAxelWindow, new Point(795, 473));

            // Type '=B8' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText4;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinWindow uIItemWindow = this.UISpreadsheetPanel1Window.UIValueClient.UIItemWindow;
            #endregion

            // Verify that the 'ClassName' property of window equals 'WindowsForms10.Window.8.app.0.2bf8098_r11_ad1'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIItemWindowClassName, uIItemWindow.ClassName);
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(818, 99));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(703, 351));
        }
        
        #region Properties
        public virtual SimpleSetParams SimpleSetParams
        {
            get
            {
                if ((this.mSimpleSetParams == null))
                {
                    this.mSimpleSetParams = new SimpleSetParams();
                }
                return this.mSimpleSetParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual LetsMakeThisWorkParams LetsMakeThisWorkParams
        {
            get
            {
                if ((this.mLetsMakeThisWorkParams == null))
                {
                    this.mLetsMakeThisWorkParams = new LetsMakeThisWorkParams();
                }
                return this.mLetsMakeThisWorkParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window();
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIValueTextWindow UIValueTextWindow
        {
            get
            {
                if ((this.mUIValueTextWindow == null))
                {
                    this.mUIValueTextWindow = new UIValueTextWindow();
                }
                return this.mUIValueTextWindow;
            }
        }
        
        public UIA2Window UIA2Window
        {
            get
            {
                if ((this.mUIA2Window == null))
                {
                    this.mUIA2Window = new UIA2Window();
                }
                return this.mUIA2Window;
            }
        }
        
        public UISTOOOOPWindow UISTOOOOPWindow
        {
            get
            {
                if ((this.mUISTOOOOPWindow == null))
                {
                    this.mUISTOOOOPWindow = new UISTOOOOPWindow();
                }
                return this.mUISTOOOOPWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIGreetingsGoodSirWindow UIGreetingsGoodSirWindow
        {
            get
            {
                if ((this.mUIGreetingsGoodSirWindow == null))
                {
                    this.mUIGreetingsGoodSirWindow = new UIGreetingsGoodSirWindow();
                }
                return this.mUIGreetingsGoodSirWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private SimpleSetParams mSimpleSetParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private LetsMakeThisWorkParams mLetsMakeThisWorkParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIValueTextWindow mUIValueTextWindow;
        
        private UIA2Window mUIA2Window;
        
        private UISTOOOOPWindow mUISTOOOOPWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIGreetingsGoodSirWindow mUIGreetingsGoodSirWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleSet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class SimpleSetParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=B2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=B2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ValueText' text box equals '5'
        /// </summary>
        public string UIValueTextEditText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellName' text box equals 'B2'
        /// </summary>
        public string UICellNameEditText = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LetsMakeThisWork'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class LetsMakeThisWorkParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=D4' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=D4";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellName' text box equals 'D7'
        /// </summary>
        public string UICellNameEditText = "D7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ValueText' text box equals '23'
        /// </summary>
        public string UIValueTextEditText = "23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Untitledd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Untitledd";
        
        /// <summary>
        /// Select '22rera' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "22rera";
        
        /// <summary>
        /// Type 'e' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "e";
        
        /// <summary>
        /// Type 'f' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSendKeys = "f";
        
        /// <summary>
        /// Type 'aefaef' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSendKeys1 = "aefaef";
        
        /// <summary>
        /// Type 'a' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSendKeys2 = "a";
        
        /// <summary>
        /// Select 'efaefaef' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "efaefaef";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '%Invalid' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "%Invalid";
        
        /// <summary>
        /// Type 'e' in 'SpreadsheetGUI - Shortcut' check box
        /// </summary>
        public string UISpreadsheetGUIShortcCheckBoxSendKeys = "e";
        
        /// <summary>
        /// Type 'aaefaefaef' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "aaefaefaef";
        
        /// <summary>
        /// Type '' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "";
        
        /// <summary>
        /// Type '{Left}{Left}{Down}{Down}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Left}{Left}{Down}{Down}";
        
        /// <summary>
        /// Type '%Invalid' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "%Invalid";
        
        /// <summary>
        /// Type '=B8' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText4 = "=B8";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of window equals 'WindowsForms10.Window.8.app.0.2bf8098_r11_ad1'
        /// </summary>
        public string UIItemWindowClassName = "WindowsForms10.Window.8.app.0.2bf8098_r11_ad1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIexeShoListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeShoListItem == null))
                {
                    this.mUISpreadsheetGUIexeShoListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIexeShoListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe - Shortcut";
                    this.mUISpreadsheetGUIexeShoListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIexeShoListItem;
            }
        }
        
        public WinCheckBox UIAwkward2CheckBox
        {
            get
            {
                if ((this.mUIAwkward2CheckBox == null))
                {
                    this.mUIAwkward2CheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIAwkward2CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "awkward 2";
                    this.mUIAwkward2CheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIAwkward2CheckBox;
            }
        }
        
        public WinCheckBox UIPodcastCheckBox
        {
            get
            {
                if ((this.mUIPodcastCheckBox == null))
                {
                    this.mUIPodcastCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIPodcastCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Podcast";
                    this.mUIPodcastCheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIPodcastCheckBox;
            }
        }
        
        public WinCheckBox UISpreadsheetGUIShortcCheckBox
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcCheckBox == null))
                {
                    this.mUISpreadsheetGUIShortcCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcCheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIexeShoListItem;
        
        private WinCheckBox mUIAwkward2CheckBox;
        
        private WinCheckBox mUIPodcastCheckBox;
        
        private WinCheckBox mUISpreadsheetGUIShortcCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UICellContentsWindow UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UIAxelWindow UIAxelWindow
        {
            get
            {
                if ((this.mUIAxelWindow == null))
                {
                    this.mUIAxelWindow = new UIAxelWindow(this);
                }
                return this.mUIAxelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsWindow mUICellContentsWindow;
        
        private UIAxelWindow mUIAxelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentsWindow : WinWindow
    {
        
        public UICellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContents";
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                }
                return this.mUICellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelWindow : WinWindow
    {
        
        public UIAxelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIAxelTitleBar UIAxelTitleBar
        {
            get
            {
                if ((this.mUIAxelTitleBar == null))
                {
                    this.mUIAxelTitleBar = new UIAxelTitleBar(this);
                }
                return this.mUIAxelTitleBar;
            }
        }
        
        public UIAxelClient UIAxelClient
        {
            get
            {
                if ((this.mUIAxelClient == null))
                {
                    this.mUIAxelClient = new UIAxelClient(this);
                }
                return this.mUIAxelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIAxelTitleBar mUIAxelTitleBar;
        
        private UIAxelClient mUIAxelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelTitleBar : WinTitleBar
    {
        
        public UIAxelTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelClient : WinClient
    {
        
        public UIAxelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITableLayoutPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITableLayoutPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Value";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIValueClient UIValueClient
        {
            get
            {
                if ((this.mUIValueClient == null))
                {
                    this.mUIValueClient = new UIValueClient(this);
                }
                return this.mUIValueClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIValueClient mUIValueClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIValueClient
        {
            get
            {
                if ((this.mUIValueClient == null))
                {
                    this.mUIValueClient = new WinClient(this);
                }
                return this.mUIValueClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIValueClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIValueClient : WinClient
    {
        
        public UIValueClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Value";
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIValueTextWindow : WinWindow
    {
        
        public UIValueTextWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Cell";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTextEdit
        {
            get
            {
                if ((this.mUIValueTextEdit == null))
                {
                    this.mUIValueTextEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueTextEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell";
                    #endregion
                }
                return this.mUIValueTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIA2Window : WinWindow
    {
        
        public UIA2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("A2");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("A2");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISTOOOOPWindow : WinWindow
    {
        
        public UISTOOOOPWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "STOOOOP!!!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("STOOOOP!!!");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public WinControl UISTOOOOPDialog
        {
            get
            {
                if ((this.mUISTOOOOPDialog == null))
                {
                    this.mUISTOOOOPDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUISTOOOOPDialog.SearchProperties[UITestControl.PropertyNames.Name] = "STOOOOP!!!";
                    this.mUISTOOOOPDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUISTOOOOPDialog.WindowTitles.Add("STOOOOP!!!");
                    #endregion
                }
                return this.mUISTOOOOPDialog;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private WinControl mUISTOOOOPDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("STOOOOP!!!");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("STOOOOP!!!");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("STOOOOP!!!");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("STOOOOP!!!");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "FileDropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIGreetingsGoodSirWindow : WinWindow
    {
        
        public UIGreetingsGoodSirWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Greetings Good Sir.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Greetings Good Sir.");
            #endregion
        }
        
        #region Properties
        public UIJohnathonIhaveaspeciWindow UIJohnathonIhaveaspeciWindow
        {
            get
            {
                if ((this.mUIJohnathonIhaveaspeciWindow == null))
                {
                    this.mUIJohnathonIhaveaspeciWindow = new UIJohnathonIhaveaspeciWindow(this);
                }
                return this.mUIJohnathonIhaveaspeciWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJohnathonIhaveaspeciWindow mUIJohnathonIhaveaspeciWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIJohnathonIhaveaspeciWindow : WinWindow
    {
        
        public UIJohnathonIhaveaspeciWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Greetings Good Sir.");
            #endregion
        }
        
        #region Properties
        public WinText UIJohnathonIhaveaspeciText
        {
            get
            {
                if ((this.mUIJohnathonIhaveaspeciText == null))
                {
                    this.mUIJohnathonIhaveaspeciText = new WinText(this);
                    #region Search Criteria
                    this.mUIJohnathonIhaveaspeciText.SearchProperties[WinText.PropertyNames.Name] = @"Johnathon, I have a special task for you at hand. This spreadsheet works where you are able to select stuff with your mouse. After you select a cell with your mouse you can type in words with your keyboard. You can enter double values as well as formulas by initilizing the use of the word =. You are aloud to save your document in the file. Also you are able to open files. It is pretty sweet dude. Also some special features are that you can use the arrow buttons to move your cursor. Johnathon this mission is dangerous. If you choose to accept it you may not come back. The spreadsheet may blow up if you are using it wrong so please be careful. Johnathon you are the chosen one. You have been chosen to save the world from bad spreadsheets. More special features include: THE ABILITY TO SAVE WHEN CLOSING! - THE ABILITY TO USE A UNDO BUTTON!! THE ABILITY TO USE ARROWS TO MOVE!!! THE ABILITY TO SAVE VS SAVE AS!!!! JOHNATHON, THIS IS HUGE you CAN do IT! Please don't be afraid you have been training yoru whole life for this.";
                    this.mUIJohnathonIhaveaspeciText.WindowTitles.Add("Greetings Good Sir.");
                    #endregion
                }
                return this.mUIJohnathonIhaveaspeciText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIJohnathonIhaveaspeciText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemsViewWindow UIItemsViewWindow
        {
            get
            {
                if ((this.mUIItemsViewWindow == null))
                {
                    this.mUIItemsViewWindow = new UIItemsViewWindow(this);
                }
                return this.mUIItemsViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIExplorerPaneWindow UIExplorerPaneWindow
        {
            get
            {
                if ((this.mUIExplorerPaneWindow == null))
                {
                    this.mUIExplorerPaneWindow = new UIExplorerPaneWindow(this);
                }
                return this.mUIExplorerPaneWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewWindow mUIItemsViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIExplorerPaneWindow mUIExplorerPaneWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemsViewWindow : WinWindow
    {
        
        public UIItemsViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        
        public WinComboBox UISaveastypeComboBox
        {
            get
            {
                if ((this.mUISaveastypeComboBox == null))
                {
                    this.mUISaveastypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISaveastypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mUISaveastypeComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveastypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        
        private WinComboBox mUISaveastypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIExplorerPaneWindow : WinWindow
    {
        
        public UIExplorerPaneWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Explorer Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinPane UIExplorerPanePane
        {
            get
            {
                if ((this.mUIExplorerPanePane == null))
                {
                    this.mUIExplorerPanePane = new WinPane(this);
                    #region Search Criteria
                    this.mUIExplorerPanePane.SearchProperties[WinControl.PropertyNames.Name] = "Explorer Pane";
                    this.mUIExplorerPanePane.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIExplorerPanePane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIExplorerPanePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIUntitledListItem UIUntitledListItem
        {
            get
            {
                if ((this.mUIUntitledListItem == null))
                {
                    this.mUIUntitledListItem = new UIUntitledListItem(this);
                }
                return this.mUIUntitledListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUntitledListItem mUIUntitledListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIUntitledListItem : WinListItem
    {
        
        public UIUntitledListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Untitled";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
}
