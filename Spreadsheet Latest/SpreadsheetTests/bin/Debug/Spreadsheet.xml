<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a set consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="M:SS.SpCell.#ctor(System.String,System.Double)">
            <summary>
            A Spreadsheet cell that can be used to take in a double and uses that double as the value
            </summary>
        </member>
        <member name="M:SS.SpCell.#ctor(System.String,System.String)">
            <summary>
            A Spreadsheet cell that can be used to take in a double and uses that double as the value
            </summary>
        </member>
        <member name="M:SS.SpCell.#ctor(System.String,SpreadsheetUtilities.Formula,System.Object)">
            <summary>
            A Spreadsheet cell that can be used to take in a double and uses that double as the value
            </summary>
        </member>
        <member name="P:SS.SpCell.content">
            <summary>
            A getter and setter for the formula contents of the cell
            </summary>
        </member>
        <member name="P:SS.SpCell.Value">
            <summary>
            A value is the total "worth" of the contents
            </summary>
        </member>
        <member name="T:SS.Spreadsheet">
            <summary>
            This class represents adding cells to a group of cells where they will map out a spreadsheet
            We keep track of only the active cells to represent infinite cells
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            This constructor constructs a spreadsheet imposing some isvalid restrictions and normalize restrictions
            This will most likely be used when creating a new document in a spreadsheet program
            </summary>
            <param name="isValid">a validity delegate</param>
            <param name="normalize">a normalization delegate </param>
            <param name="version">version that the program was saved under</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            This constructor constructs a spreadsheet imposing some isvalid restrictions and normalize restrictions
            
            This will mostly likely be used to create a spreadsheet from a previously saved spreadsheet file
            
            
            </summary>
            <param name="file">A string representing a file path</param>
            <param name="isValid">a validity delegate</param>
            <param name="normalize">a normalization delegate </param>
            <param name="version">version that the program is made under</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Spreadsheet object that takes no paremeters and is used to represent a spreadsheet with infinite cells
            The sheet will not be standardized to have Excel looking graphs
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Searches through all the cells in the spreadsheet that contains 
            </summary>
            <returns> A IEnumerable type of all string names of cells in the spread sheet</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            Takes in the name of a cell based on the validity of the name it should return the contents of the cell
            
            If name is null or invalid, throws an InvalidNameException.
            
            If name is not initilizaed empty string is returned
            </summary>
            <param name="name">The name of the cell</param>
            <returns>It returns a object of all the cell contents </returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            An InvalidNameException will be thrown in name or invalid are null or invalid
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            </summary>
            <param name="name">The name is the address of the cell on the spreadsheet</param>
            <param name="number">Is a number that represents a double in the cell</param>
            <returns>A set of cells dependent on the cell that is being changed</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            An ArgumentNullException will be thrown if the contents of the string are null
            
            An InvalidNameException will be thrown if the name is Invalid or if it is null
            
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            
            </summary>
            <param name="name"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If the formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.  (No change is made to the spreadsheet.)
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            
            Creates a new cell and adds it to the active cells on the spreadsheet
            </summary>
            <param name="name">This paremeter is the cell location which is the name</param>
            <param name="formula">This object represents a formula if it is inserted in the cell</param>
            <returns></returns>
            <summary>
            If the formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.  (No change is made to the spreadsheet.)
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            
            Creates a new cell and adds it to the active cells on the spreadsheet
            </summary>
            <param name="name">This paremeter is the cell location which is the name</param>
            <param name="formula">This object represents a formula if it is inserted in the cell</param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            
            </summary>
            <param name="name">The name of the cell of whose dependents we want</param>
            <returns>The set of all </returns>
        </member>
        <member name="M:SS.Spreadsheet.EvaluateCell(System.String)">
            <summary>
            A LookUp Method used to look up a "variable" cell and then return a value for it
            
            This will be used to call the formula evaluator when using the constructor of the SpCell class
            </summary>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.LookupCell(System.String)">
            <summary>
            Driver method for Evaulate cell used to define the lookup method for the formula evaluator
            </summary>
            <param name="name">The name of the cell</param>
            <returns>a double defined for the variable</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Gets the saved version of the spreadsheet
            </summary>
            <param name="filename"></param>
            <returns>Gets the saved version of the spreadsheet</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SS.Spreadsheet.Save(System.String)" -->
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <summary>
            Each cell may represent a value according to the content stored into the cell
            This method checks a cell by name and obtains that value
            
            If the content is a string it returns a string
            If it is double it returns the double
            If it is a formula it evaluates the formula
            
            </summary>
            <param name="name"> This is the name of the cell</param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            This method sets what ever the user inputs into the cells... 
            If the user uses the = command it will be a formula
            If the user enters a double it recognizes it as a double
            If the user enters a string it also recognizes it
            </summary>
            <param name="name">name of the cell like A1</param>
            <param name="content">the stuff written in the cell</param>
            <returns>A set of all the cells that needs to be changed</returns>
        </member>
        <member name="M:SS.Spreadsheet.recalculateCells(System.Collections.Generic.ISet{System.String})">
            <summary>
            With this method we will recalucate
            </summary>
            <param name="cellsToRecalculate"></param>
        </member>
        <member name="M:SS.Spreadsheet.LoadFile(System.String,System.Boolean)">
            <summary>
            This helper method will be used both in the constructor as well as the get saved version method
            
            The boolean indicates the place where this method is used
            </summary>
            <param name="filename">the name of the file we are trying to get data from</param>
            <param name="VersionReturn">Where the method is being called</param>
            <returns>a version string</returns>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            If the spreadsheet has been setted since the opening or saving the spreadsheet then the state of changed will be true
            </summary>
        </member>
    </members>
</doc>
