// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace AmazingCodeTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinButton uIOKButton = this.UIERRORWindow.UIOKWindow.UIOKButton;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod1Params.ExePath, this.RecordedMethod1Params.AlternateExePath);

            // Type '%Invalid' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText;

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod1Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '10' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod1Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type '12' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod1Params.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type 'aeafe' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText3;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod1Params.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Type 'aefaef' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText4;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod1Params.UICellContentsEditSendKeys3, ModifierKeys.None);

            // Type '%Invalid' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText5;

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod1Params.UIOKButtonSendKeys1, ModifierKeys.None);

            // Type '=A3+B2' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText6;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod1Params.UICellContentsEditSendKeys4, ModifierKeys.None);

            // Type '10' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod1Params.UICellContentsEditText7;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod1Params.UICellContentsEditSendKeys5, ModifierKeys.None);

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(206, 442));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinWindow uITableLayoutPanel1Window = this.UIItemWindow.UIAxelWindow.UIAxelClient.UITableLayoutPanel1Window;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod2Params.ExePath, this.RecordedMethod2Params.AlternateExePath);

            // Type '=A3' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type '10' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type '1234' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Type 'aef' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText3;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys3, ModifierKeys.None);

            // Type 'akefj;ael' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText4;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys4, ModifierKeys.None);

            // Type 'ef' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText5;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys5, ModifierKeys.None);

            // Type 'lol' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText6;

            // Click 'tableLayoutPanel1' window
            Mouse.Click(uITableLayoutPanel1Window, new Point(170, 115));

            // Type '12' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText7;

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(172, 141));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(154, 61));

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys6, ModifierKeys.None);

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(140, 65));

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys7, ModifierKeys.None);

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(92, 196));

            // Right-Click 'Value' client
            Mouse.Click(uIValueClient, MouseButtons.Right, ModifierKeys.None, new Point(66, 200));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinWindow uIMenuStrip1Window = this.UIMenuStrip1Window;
            #endregion

            // Verify that the 'Transparent' property of 'menuStrip1' window equals 'False'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIMenuStrip1WindowTransparent, uIMenuStrip1Window.Transparent);
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIAxelWindow.UIAxelTitleBar.UICloseButton;
            WinWindow uIAxelWindow = this.UIItemWindow.UIAxelWindow;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 17));

            // Click 'Axel' window
            Mouse.Click(uIAxelWindow, new Point(776, 529));
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod4Params.ExePath, this.RecordedMethod4Params.AlternateExePath);

            // Type '5' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type '6' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type '2' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Type '1' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText3;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys3, ModifierKeys.None);

            // Type '3' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText4;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys4, ModifierKeys.None);

            // Type '6' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText5;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys5, ModifierKeys.None);

            // Type '7' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText6;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys6, ModifierKeys.None);

            // Type '8' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod4Params.UICellContentsEditText7;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod4Params.UICellContentsEditSendKeys7, ModifierKeys.None);

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(900, 199));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(592, 249));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinCheckBox uIAwkward2CheckBox = this.UIProgramManagerWindow.UIDesktopList.UIAwkward2CheckBox;
            WinText uIJohnathonIhaveaspeciText = this.UIGreetingsGoodSirWindow.UIJohnathonIhaveaspeciWindow.UIJohnathonIhaveaspeciText;
            WinCheckBox uIPodcastCheckBox = this.UIProgramManagerWindow.UIDesktopList.UIPodcastCheckBox;
            WinText uICellContentsText = this.UICellContentsWindow.UICellContentsText;
            WinWindow uIAxelWindow = this.UIItemWindow.UIAxelWindow;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            WinList uIItemsViewList = this.UISaveAsWindow.UIItemsViewWindow.UIItemsViewList;
            WinCheckBox uIEclipseCheckBox = this.UIProgramManagerWindow.UIDesktopList.UIEclipseCheckBox;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinPane uIExplorerPanePane = this.UISaveAsWindow.UIExplorerPaneWindow.UIExplorerPanePane;
            WinControl uIOpenDropDownButton = this.UISaveAsWindow.UIAddressCUsersKcOneDrWindow.UIDesktopSplitButton.UIOpenDropDownButton;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinToolBar uIAddressCUsersKcOneDrToolBar = this.UIOpenWindow.UIAddressCUsersKcOneDrWindow.UIAddressCUsersKcOneDrToolBar;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod5Params.ExePath, this.RecordedMethod5Params.AlternateExePath);

            // Type 'Let's Do This' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type 'Help' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type '=C6' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Type '=C7' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText3;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys3, ModifierKeys.None);

            // Type '+C7' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText4;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys4, ModifierKeys.None);

            // Type '=C8' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText5;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys5, ModifierKeys.None);

            // Type '10' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText6;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys6, ModifierKeys.None);

            // Type '=A10' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText7;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys7, ModifierKeys.None);

            // Type '60' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText8;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys8, ModifierKeys.None);

            // Type '=A1+B1' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText9;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys9, ModifierKeys.None);

            // Type '20' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText10;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod5Params.UICellContentsEditSendKeys10, ModifierKeys.None);

            // Type 'yes ' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod5Params.UICellContentsEditText11;

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(98, 23));

            // Click 'Johnathon, I have a special task for you at hand. ...' label
            Mouse.Click(uIJohnathonIhaveaspeciText, new Point(85, 118));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(27, 15));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(31, 24));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(35, 25));

            // Click 'Cell Contents' label
            Mouse.Click(uICellContentsText, new Point(64, 10));

            // Click 'Axel' window
            Mouse.Click(uIAxelWindow, new Point(755, 146));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(67, 24));

            // Double-Click 'Podcast' check box
            Mouse.DoubleClick(uIPodcastCheckBox, new Point(67, 24));

            // Double-Click 'Podcast' check box
            Mouse.DoubleClick(uIPodcastCheckBox, new Point(67, 24));

            // Double-Click 'Podcast' check box
            Mouse.DoubleClick(uIPodcastCheckBox, new Point(67, 24));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(67, 24));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(67, 24));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(45, 20));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(59, 13));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(213, 309));

            // Double-Click 'Items View' list box
            Mouse.DoubleClick(uIItemsViewList, new Point(176, 280));

            // Click 'eclipse' check box
            Mouse.Click(uIEclipseCheckBox, new Point(94, 32));

            // Select 'Cool Beans' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod5Params.UIFilenameComboBoxEditableItem;

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(396, 348));

            // Click 'Explorer Pane' pane
            Mouse.Click(uIExplorerPanePane, new Point(777, 324));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(345, 272));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(345, 278));

            // Click 'Open' DropDownButton
            Mouse.Click(uIOpenDropDownButton, new Point(8, 12));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(377, 357));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(458, 213));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(49, 31));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(757, 165));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(46, 29));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(188, 279));

            // Double-Click 'Address: C:\Users\Kc\OneDrive\Documents' tool bar
            Mouse.DoubleClick(uIAddressCUsersKcOneDrToolBar, new Point(46, 22));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(859, 139));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinButton uIOKButton = this.UIERRORWindow.UIOKWindow.UIOKButton;
            WinCheckBox uISpotifyCheckBox = this.UIProgramManagerWindow.UIDesktopList.UISpotifyCheckBox;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            WinControl uIAssertClassMicrosoftDocument = this.UIAssertClassMicrosoftWindow.UIChromeLegacyWindowWindow.UIAssertClassMicrosoftDocument;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod6Params.ExePath, this.RecordedMethod6Params.AlternateExePath);

            // Type '%Invalid' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText;

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod6Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type 'that means it worked' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type 'hahahha' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type 'noob' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText3;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Type 'yes' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText4;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys3, ModifierKeys.None);

            // Type 'please' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText5;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys4, ModifierKeys.None);

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Click 'Spotify' check box
            Mouse.Click(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Click 'Spotify' check box
            Mouse.Click(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Double-Click 'Spotify' check box
            Mouse.DoubleClick(uISpotifyCheckBox, new Point(28, 73));

            // Type 'sweet' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText6;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys5, ModifierKeys.None);

            // Type 'dude' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText7;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys6, ModifierKeys.None);

            // Type 'that worked' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText8;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys7, ModifierKeys.None);

            // Type 'too' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText9;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys8, ModifierKeys.None);

            // Type '134' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText10;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys9, ModifierKeys.None);

            // Type '=A14' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText11;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys10, ModifierKeys.None);

            // Type 'wow' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText12;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys11, ModifierKeys.None);

            // Type 'thats cool' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText13;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys12, ModifierKeys.None);

            // Type '=B16' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod6Params.UICellContentsEditText14;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod6Params.UICellContentsEditSendKeys13, ModifierKeys.None);

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(925, 196));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(615, 254));

            // Move 'Assert Class (Microsoft.VisualStudio.TestTools.Uni...' document
            Mouse.StartDragging(uIAssertClassMicrosoftDocument, new Point(509, 280));
            Mouse.StopDragging(uIAssertClassMicrosoftDocument, -469, -587);
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinCheckBox uIAwkward2CheckBox = this.UIProgramManagerWindow.UIDesktopList.UIAwkward2CheckBox;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinList uIItemsViewList = this.UISaveAsWindow.UIItemsViewWindow.UIItemsViewList;
            WinClient uIOpenClient = this.UIOpenWindow1.UIItemWindow.UIOpenClient;
            WinSplitButton uIDesktopSplitButton = this.UIOpenWindow1.UIAddressCUsersKcOneDrWindow.UIAddressCUsersKcOneDrToolBar.UIDesktopSplitButton;
            WinCheckBox uIPodcastCheckBox = this.UIProgramManagerWindow.UIDesktopList.UIPodcastCheckBox;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            WinClient uITableLayoutPanel1Client = this.UIItemWindow.UITableLayoutPanel1Window.UITableLayoutPanel1Client;
            WinText uIJohnathonIhaveaspeciText = this.UIGreetingsGoodSirALSOWindow.UIJohnathonIhaveaspeciWindow.UIJohnathonIhaveaspeciText;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod7Params.ExePath, this.RecordedMethod7Params.AlternateExePath);

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(61, 39));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(222, 277));

            // Select 'hello' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod7Params.UIFilenameComboBoxEditableItem;

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(401, 355));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(81, 49));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(211, 257));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(63, 36));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(224, 294));

            // Click 'Open' client
            Mouse.Click(uIOpenClient, new Point(249, 154));

            // Double-Click '‎Desktop' split button
            Mouse.DoubleClick(uIDesktopSplitButton, new Point(5, 9));

            // Double-Click 'Podcast' check box
            Mouse.DoubleClick(uIPodcastCheckBox, new Point(95, 49));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(95, 49));

            // Double-Click 'Podcast' check box
            Mouse.DoubleClick(uIPodcastCheckBox, new Point(102, 50));

            // Click 'Podcast' check box
            Mouse.Click(uIPodcastCheckBox, new Point(71, 47));

            // Move 'Podcast' check box to 'Value' client
            uIValueClient.EnsureClickable(new Point(127, 5));
            Mouse.StartDragging(uIPodcastCheckBox, new Point(71, 70));
            Mouse.StopDragging(uIValueClient, new Point(127, 5));

            // Click 'tableLayoutPanel1' client
            Mouse.Click(uITableLayoutPanel1Client, new Point(102, 45));

            // Click 'awkward 2' check box
            Mouse.Click(uIAwkward2CheckBox, new Point(113, 49));

            // Click 'Johnathon, I have a special task for you at hand. ...' label
            Mouse.Click(uIJohnathonIhaveaspeciText, new Point(80, 108));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(878, 166));

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(538, 284));

            // Select 'hellop!' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod7Params.UIFilenameComboBoxEditableItem1;

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(413, 354));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIERRORWindow UIERRORWindow
        {
            get
            {
                if ((this.mUIERRORWindow == null))
                {
                    this.mUIERRORWindow = new UIERRORWindow();
                }
                return this.mUIERRORWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window();
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window();
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UIGreetingsGoodSirWindow UIGreetingsGoodSirWindow
        {
            get
            {
                if ((this.mUIGreetingsGoodSirWindow == null))
                {
                    this.mUIGreetingsGoodSirWindow = new UIGreetingsGoodSirWindow();
                }
                return this.mUIGreetingsGoodSirWindow;
            }
        }
        
        public UICellContentsWindow1 UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow1();
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIAssertClassMicrosoftWindow UIAssertClassMicrosoftWindow
        {
            get
            {
                if ((this.mUIAssertClassMicrosoftWindow == null))
                {
                    this.mUIAssertClassMicrosoftWindow = new UIAssertClassMicrosoftWindow();
                }
                return this.mUIAssertClassMicrosoftWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1();
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIGreetingsGoodSirALSOWindow UIGreetingsGoodSirALSOWindow
        {
            get
            {
                if ((this.mUIGreetingsGoodSirALSOWindow == null))
                {
                    this.mUIGreetingsGoodSirALSOWindow = new UIGreetingsGoodSirALSOWindow();
                }
                return this.mUIGreetingsGoodSirALSOWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private UIItemWindow mUIItemWindow;
        
        private UIERRORWindow mUIERRORWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UIGreetingsGoodSirWindow mUIGreetingsGoodSirWindow;
        
        private UICellContentsWindow1 mUICellContentsWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIAssertClassMicrosoftWindow mUIAssertClassMicrosoftWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIGreetingsGoodSirALSOWindow mUIGreetingsGoodSirALSOWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '%Invalid' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "%Invalid";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '12' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "12";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'aeafe' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "aeafe";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'aefaef' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText4 = "aefaef";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '%Invalid' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText5 = "%Invalid";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A3+B2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText6 = "=A3+B2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText7 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys5 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A3' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=A3";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '1234' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "1234";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'aef' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "aef";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'akefj;ael' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText4 = "akefj;ael";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'ef' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText5 = "ef";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'lol' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText6 = "lol";
        
        /// <summary>
        /// Type '12' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText7 = "12";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys7 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Transparent' property of 'menuStrip1' window equals 'False'
        /// </summary>
        public bool UIMenuStrip1WindowTransparent = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '6' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText4 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '6' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText5 = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '7' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText6 = "7";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '8' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText7 = "8";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys7 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Let's Do This' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "Let\'s Do This";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Help' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "Help";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=C6' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "=C6";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=C7' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "=C7";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '+C7' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText4 = "+C7";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '=C8' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText5 = "=C8";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText6 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '=A10' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText7 = "=A10";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '60' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText8 = "60";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText9 = "=A1+B1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys9 = "{Enter}";
        
        /// <summary>
        /// Type '20' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText10 = "20";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys10 = "{Enter}";
        
        /// <summary>
        /// Type 'yes ' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText11 = "yes ";
        
        /// <summary>
        /// Select 'Cool Beans' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Cool Beans";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '%Invalid' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "%Invalid";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'that means it worked' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "that means it worked";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'hahahha' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "hahahha";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'noob' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "noob";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'yes' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText4 = "yes";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'please' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText5 = "please";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'sweet' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText6 = "sweet";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'dude' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText7 = "dude";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type 'that worked' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText8 = "that worked";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type 'too' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText9 = "too";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type '134' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText10 = "134";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys9 = "{Enter}";
        
        /// <summary>
        /// Type '=A14' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText11 = "=A14";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys10 = "{Enter}";
        
        /// <summary>
        /// Type 'wow' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText12 = "wow";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys11 = "{Enter}";
        
        /// <summary>
        /// Type 'thats cool' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText13 = "thats cool";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys12 = "{Enter}";
        
        /// <summary>
        /// Type '=B16' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText14 = "=B16";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys13 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kc\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Sp" +
            "readsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'hello' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "hello";
        
        /// <summary>
        /// Select 'hellop!' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "hellop!";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UICellContentsWindow UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UIAxelWindow UIAxelWindow
        {
            get
            {
                if ((this.mUIAxelWindow == null))
                {
                    this.mUIAxelWindow = new UIAxelWindow(this);
                }
                return this.mUIAxelWindow;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsWindow mUICellContentsWindow;
        
        private UIAxelWindow mUIAxelWindow;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentsWindow : WinWindow
    {
        
        public UICellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContents";
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                }
                return this.mUICellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelWindow : WinWindow
    {
        
        public UIAxelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIAxelClient UIAxelClient
        {
            get
            {
                if ((this.mUIAxelClient == null))
                {
                    this.mUIAxelClient = new UIAxelClient(this);
                }
                return this.mUIAxelClient;
            }
        }
        
        public UIAxelTitleBar UIAxelTitleBar
        {
            get
            {
                if ((this.mUIAxelTitleBar == null))
                {
                    this.mUIAxelTitleBar = new UIAxelTitleBar(this);
                }
                return this.mUIAxelTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAxelClient mUIAxelClient;
        
        private UIAxelTitleBar mUIAxelTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelClient : WinClient
    {
        
        public UIAxelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITableLayoutPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITableLayoutPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelTitleBar : WinTitleBar
    {
        
        public UIAxelTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            #endregion
        }
        
        #region Properties
        public WinClient UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new WinClient(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUITableLayoutPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIERRORWindow : WinWindow
    {
        
        public UIERRORWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ERROR";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("ERROR");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("ERROR");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("ERROR");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIAwkward2CheckBox
        {
            get
            {
                if ((this.mUIAwkward2CheckBox == null))
                {
                    this.mUIAwkward2CheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIAwkward2CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "awkward 2";
                    this.mUIAwkward2CheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIAwkward2CheckBox;
            }
        }
        
        public WinCheckBox UIPodcastCheckBox
        {
            get
            {
                if ((this.mUIPodcastCheckBox == null))
                {
                    this.mUIPodcastCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIPodcastCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Podcast";
                    this.mUIPodcastCheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIPodcastCheckBox;
            }
        }
        
        public WinCheckBox UIEclipseCheckBox
        {
            get
            {
                if ((this.mUIEclipseCheckBox == null))
                {
                    this.mUIEclipseCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIEclipseCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "eclipse";
                    this.mUIEclipseCheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIEclipseCheckBox;
            }
        }
        
        public WinCheckBox UISpotifyCheckBox
        {
            get
            {
                if ((this.mUISpotifyCheckBox == null))
                {
                    this.mUISpotifyCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISpotifyCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Spotify";
                    this.mUISpotifyCheckBox.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpotifyCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIAwkward2CheckBox;
        
        private WinCheckBox mUIPodcastCheckBox;
        
        private WinCheckBox mUIEclipseCheckBox;
        
        private WinCheckBox mUISpotifyCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Value";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIValueClient
        {
            get
            {
                if ((this.mUIValueClient == null))
                {
                    this.mUIValueClient = new WinClient(this);
                }
                return this.mUIValueClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIValueClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "menuStrip1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("menuStrip1");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIGreetingsGoodSirWindow : WinWindow
    {
        
        public UIGreetingsGoodSirWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Greetings Good Sir.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Greetings Good Sir.");
            #endregion
        }
        
        #region Properties
        public UIJohnathonIhaveaspeciWindow UIJohnathonIhaveaspeciWindow
        {
            get
            {
                if ((this.mUIJohnathonIhaveaspeciWindow == null))
                {
                    this.mUIJohnathonIhaveaspeciWindow = new UIJohnathonIhaveaspeciWindow(this);
                }
                return this.mUIJohnathonIhaveaspeciWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJohnathonIhaveaspeciWindow mUIJohnathonIhaveaspeciWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIJohnathonIhaveaspeciWindow : WinWindow
    {
        
        public UIJohnathonIhaveaspeciWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Greetings Good Sir.");
            #endregion
        }
        
        #region Properties
        public WinText UIJohnathonIhaveaspeciText
        {
            get
            {
                if ((this.mUIJohnathonIhaveaspeciText == null))
                {
                    this.mUIJohnathonIhaveaspeciText = new WinText(this);
                    #region Search Criteria
                    this.mUIJohnathonIhaveaspeciText.SearchProperties[WinText.PropertyNames.Name] = @"Johnathon, I have a special task for you at hand. This spreadsheet works where you are able to select stuff with your mouse. After you select a cell with your mouse you can type in words with your keyboard. You can enter double values as well as formulas by initilizing the use of the word =. You are aloud to save your document in the file. Also you are able to open files. It is pretty sweet dude. Also some special features are that you can use the arrow buttons to move your cursor. Johnathon this mission is dangerous. If you choose to accept it you may not come back.  The spreadsheet may blow up if you are using it wrong so please be careful. Johnathon you are the chosen one. You have been chosen to save the world from bad spreadsheets. More special features include: THE ABILITY TO SAVE WHEN CLOSING! CHANGE THE FONT OF THE SPREADSHEET - THE ABILITY TO USE A UNDO BUTTON!! THE ABILITY TO USE ARROWS TO MOVE!!! THE ABILITY TO SAVE VS SAVE AS!!!! JOHNATHON, THIS IS HUGE you CAN do IT! Please don't be afraid you have been training yoru whole life for this.";
                    this.mUIJohnathonIhaveaspeciText.WindowTitles.Add("Greetings Good Sir.");
                    #endregion
                }
                return this.mUIJohnathonIhaveaspeciText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIJohnathonIhaveaspeciText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentsWindow1 : WinWindow
    {
        
        public UICellContentsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Cell Contents";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Cell Contents");
            #endregion
        }
        
        #region Properties
        public WinText UICellContentsText
        {
            get
            {
                if ((this.mUICellContentsText == null))
                {
                    this.mUICellContentsText = new WinText(this);
                    #region Search Criteria
                    this.mUICellContentsText.SearchProperties[WinText.PropertyNames.Name] = "Cell Contents";
                    this.mUICellContentsText.WindowTitles.Add("Cell Contents");
                    #endregion
                }
                return this.mUICellContentsText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICellContentsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemsViewWindow UIItemsViewWindow
        {
            get
            {
                if ((this.mUIItemsViewWindow == null))
                {
                    this.mUIItemsViewWindow = new UIItemsViewWindow(this);
                }
                return this.mUIItemsViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIExplorerPaneWindow UIExplorerPaneWindow
        {
            get
            {
                if ((this.mUIExplorerPaneWindow == null))
                {
                    this.mUIExplorerPaneWindow = new UIExplorerPaneWindow(this);
                }
                return this.mUIExplorerPaneWindow;
            }
        }
        
        public UIAddressCUsersKcOneDrWindow UIAddressCUsersKcOneDrWindow
        {
            get
            {
                if ((this.mUIAddressCUsersKcOneDrWindow == null))
                {
                    this.mUIAddressCUsersKcOneDrWindow = new UIAddressCUsersKcOneDrWindow(this);
                }
                return this.mUIAddressCUsersKcOneDrWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewWindow mUIItemsViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIExplorerPaneWindow mUIExplorerPaneWindow;
        
        private UIAddressCUsersKcOneDrWindow mUIAddressCUsersKcOneDrWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemsViewWindow : WinWindow
    {
        
        public UIItemsViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIExplorerPaneWindow : WinWindow
    {
        
        public UIExplorerPaneWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Explorer Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinPane UIExplorerPanePane
        {
            get
            {
                if ((this.mUIExplorerPanePane == null))
                {
                    this.mUIExplorerPanePane = new WinPane(this);
                    #region Search Criteria
                    this.mUIExplorerPanePane.SearchProperties[WinControl.PropertyNames.Name] = "Explorer Pane";
                    this.mUIExplorerPanePane.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIExplorerPanePane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIExplorerPanePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAddressCUsersKcOneDrWindow : WinWindow
    {
        
        public UIAddressCUsersKcOneDrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDesktopSplitButton UIDesktopSplitButton
        {
            get
            {
                if ((this.mUIDesktopSplitButton == null))
                {
                    this.mUIDesktopSplitButton = new UIDesktopSplitButton(this);
                }
                return this.mUIDesktopSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopSplitButton mUIDesktopSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopSplitButton : WinSplitButton
    {
        
        public UIDesktopSplitButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "‎Desktop";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinControl UIOpenDropDownButton
        {
            get
            {
                if ((this.mUIOpenDropDownButton == null))
                {
                    this.mUIOpenDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIOpenDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Open";
                    this.mUIOpenDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    this.mUIOpenDropDownButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIOpenDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIOpenDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAddressCUsersKcOneDrWindow1 UIAddressCUsersKcOneDrWindow
        {
            get
            {
                if ((this.mUIAddressCUsersKcOneDrWindow == null))
                {
                    this.mUIAddressCUsersKcOneDrWindow = new UIAddressCUsersKcOneDrWindow1(this);
                }
                return this.mUIAddressCUsersKcOneDrWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressCUsersKcOneDrWindow1 mUIAddressCUsersKcOneDrWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAddressCUsersKcOneDrWindow1 : WinWindow
    {
        
        public UIAddressCUsersKcOneDrWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinToolBar UIAddressCUsersKcOneDrToolBar
        {
            get
            {
                if ((this.mUIAddressCUsersKcOneDrToolBar == null))
                {
                    this.mUIAddressCUsersKcOneDrToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIAddressCUsersKcOneDrToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: C:\\Users\\Kc\\OneDrive\\Documents";
                    this.mUIAddressCUsersKcOneDrToolBar.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIAddressCUsersKcOneDrToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIAddressCUsersKcOneDrToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAssertClassMicrosoftWindow : WinWindow
    {
        
        public UIAssertClassMicrosoftWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Assert Class (Microsoft.VisualStudio.TestTools.UnitTesting) - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("Assert Class (Microsoft.VisualStudio.TestTools.UnitTesting) - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIChromeLegacyWindowWindow UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChromeLegacyWindowWindow mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIChromeLegacyWindowWindow : WinWindow
    {
        
        public UIChromeLegacyWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "217428416";
            this.WindowTitles.Add("Assert Class (Microsoft.VisualStudio.TestTools.UnitTesting) - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIAssertClassMicrosoftDocument
        {
            get
            {
                if ((this.mUIAssertClassMicrosoftDocument == null))
                {
                    this.mUIAssertClassMicrosoftDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIAssertClassMicrosoftDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIAssertClassMicrosoftDocument.WindowTitles.Add("Assert Class (Microsoft.VisualStudio.TestTools.UnitTesting) - Google Chrome");
                    #endregion
                }
                return this.mUIAssertClassMicrosoftDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIAssertClassMicrosoftDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAddressCUsersKcOneDrWindow2 UIAddressCUsersKcOneDrWindow
        {
            get
            {
                if ((this.mUIAddressCUsersKcOneDrWindow == null))
                {
                    this.mUIAddressCUsersKcOneDrWindow = new UIAddressCUsersKcOneDrWindow2(this);
                }
                return this.mUIAddressCUsersKcOneDrWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIAddressCUsersKcOneDrWindow2 mUIAddressCUsersKcOneDrWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinClient UIOpenClient
        {
            get
            {
                if ((this.mUIOpenClient == null))
                {
                    this.mUIOpenClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIOpenClient.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIOpenClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAddressCUsersKcOneDrWindow2 : WinWindow
    {
        
        public UIAddressCUsersKcOneDrWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAddressCUsersKcOneDrToolBar UIAddressCUsersKcOneDrToolBar
        {
            get
            {
                if ((this.mUIAddressCUsersKcOneDrToolBar == null))
                {
                    this.mUIAddressCUsersKcOneDrToolBar = new UIAddressCUsersKcOneDrToolBar(this);
                }
                return this.mUIAddressCUsersKcOneDrToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressCUsersKcOneDrToolBar mUIAddressCUsersKcOneDrToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAddressCUsersKcOneDrToolBar : WinToolBar
    {
        
        public UIAddressCUsersKcOneDrToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: C:\\Users\\Kc\\OneDrive\\Documents";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIDesktopSplitButton
        {
            get
            {
                if ((this.mUIDesktopSplitButton == null))
                {
                    this.mUIDesktopSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIDesktopSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "‎Desktop";
                    this.mUIDesktopSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIDesktopSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIDesktopSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIGreetingsGoodSirALSOWindow : WinWindow
    {
        
        public UIGreetingsGoodSirALSOWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Greetings Good Sir.ALSO REMEMBER DUDE, THAT an important special feature is the a" +
                "bility to SAVE before quitting!! YESS!!! is that not neaT?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Greetings Good Sir.ALSO REMEMBER DUDE, THAT an important special feature is the a" +
                    "bility to SAVE before quitting!! YESS!!! is that not neaT?");
            #endregion
        }
        
        #region Properties
        public UIJohnathonIhaveaspeciWindow1 UIJohnathonIhaveaspeciWindow
        {
            get
            {
                if ((this.mUIJohnathonIhaveaspeciWindow == null))
                {
                    this.mUIJohnathonIhaveaspeciWindow = new UIJohnathonIhaveaspeciWindow1(this);
                }
                return this.mUIJohnathonIhaveaspeciWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJohnathonIhaveaspeciWindow1 mUIJohnathonIhaveaspeciWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIJohnathonIhaveaspeciWindow1 : WinWindow
    {
        
        public UIJohnathonIhaveaspeciWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Greetings Good Sir.ALSO REMEMBER DUDE, THAT an important special feature is the a" +
                    "bility to SAVE before quitting!! YESS!!! is that not neaT?");
            #endregion
        }
        
        #region Properties
        public WinText UIJohnathonIhaveaspeciText
        {
            get
            {
                if ((this.mUIJohnathonIhaveaspeciText == null))
                {
                    this.mUIJohnathonIhaveaspeciText = new WinText(this);
                    #region Search Criteria
                    this.mUIJohnathonIhaveaspeciText.SearchProperties[WinText.PropertyNames.Name] = @"Johnathon, I have a special task for you at hand. This spreadsheet works where you are able to select stuff with your mouse. After you select a cell with your mouse you can type in words with your keyboard. You can enter double values as well as formulas by initilizing the use of the word =. You are aloud to save your document in the file. Also you are able to open files. It is pretty sweet dude. Also some special features are that you can use the arrow buttons to move your cursor. Johnathon this mission is dangerous. If you choose to accept it you may not come back.  The spreadsheet may blow up if you are using it wrong so please be careful. Johnathon you are the chosen one. You have been chosen to save the world from bad spreadsheets. More special features include: THE ABILITY TO SAVE WHEN CLOSING! CHANGE THE FONT OF THE SPREADSHEET - THE ABILITY TO USE A UNDO BUTTON!! THE ABILITY TO USE ARROWS TO MOVE!!! THE ABILITY TO SAVE VS SAVE AS!!!! JOHNATHON, THIS IS HUGE you CAN do IT! Please don't be afraid you have been training yoru whole life for this.";
                    this.mUIJohnathonIhaveaspeciText.WindowTitles.Add("Greetings Good Sir.ALSO REMEMBER DUDE, THAT an important special feature is the a" +
                            "bility to SAVE before quitting!! YESS!!! is that not neaT?");
                    #endregion
                }
                return this.mUIJohnathonIhaveaspeciText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIJohnathonIhaveaspeciText;
        #endregion
    }
}
