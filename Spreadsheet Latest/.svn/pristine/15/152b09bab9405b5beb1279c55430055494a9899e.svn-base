// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SimpleSet - Use 'SimpleSetParams' to pass parameters into this method.
        /// </summary>
        public void SimpleSet()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            ApplicationUnderTest WindowSpreadsheet = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '=B2' in 'CellContents' text box
            uICellContentsEdit.Text = this.SimpleSetParams.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SimpleSetParams.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type '=A1' in 'CellContents' text box
            uICellContentsEdit.Text = this.SimpleSetParams.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SimpleSetParams.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type '=A2' in 'CellContents' text box
            uICellContentsEdit.Text = this.SimpleSetParams.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SimpleSetParams.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(433, 141));

            // Right-Click 'Value' client
            Mouse.Click(uIValueClient, MouseButtons.Right, ModifierKeys.None, new Point(154, 58));
        }
        
        /// <summary>
        /// These better work
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIValueTextEdit = this.UIValueTextWindow.UIValueTextEdit;
            WinEdit uICellNameEdit = this.UIA2Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'ValueText' text box equals '5'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIValueTextEditText, uIValueTextEdit.Text, "NO!");

            // Verify that the 'Text' property of 'CellName' text box equals 'B2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// CloseMethod
        /// </summary>
        public void CloseMethod()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIAxelWindow.UIAxelTitleBar.UICloseButton;
            WinButton uINOButton = this.UISTOOOOPWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(74, 15));
        }
        
        /// <summary>
        /// Yes
        /// </summary>
        public void LetsMakeThisWork()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            WinEdit uICellContentsEdit = this.UIItemWindow.UICellContentsWindow.UICellContentsEdit;
            #endregion

            ApplicationUnderTest WindowSpreadsheet = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");


            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(286, 99));

            // Type '=D4' in 'CellContents' text box
            uICellContentsEdit.Text = this.LetsMakeThisWorkParams.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.LetsMakeThisWorkParams.UICellContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UIA2Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'CellName' text box equals 'D7'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uIValueClient = this.UISpreadsheetPanel1Window.UIItemWindow.UIValueClient;
            #endregion

            // Click 'Value' client
            Mouse.Click(uIValueClient, new Point(301, 120));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uIValueTextEdit = this.UIValueTextWindow.UIValueTextEdit;
            #endregion

            // Verify that the 'Text' property of 'ValueText' text box equals '23'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIValueTextEditText, uIValueTextEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIAxelWindow.UIAxelTitleBar.UICloseButton;
            WinButton uINOButton = this.UISTOOOOPWindow.UINOWindow.UINOButton;
            WinButton uICancelButton = this.UISTOOOOPWindow.UICancelWindow.UICancelButton;
            WinControl uISTOOOOPDialog = this.UISTOOOOPWindow.UISTOOOOPDialog;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(8, 15));

            // Move '&No' button to 'Cancel' button
            uICancelButton.EnsureClickable(new Point(31, 14));
            Mouse.StartDragging(uINOButton, new Point(28, 15));
            Mouse.StopDragging(uICancelButton, new Point(31, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(65, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 2));

            // Move 'STOOOOP!!!' Dialog
            Mouse.StartDragging(uISTOOOOPDialog, new Point(226, 120));
            Mouse.StopDragging(uISTOOOOPDialog, 81, -14);

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(22, 11));
        }
        
        #region Properties
        public virtual SimpleSetParams SimpleSetParams
        {
            get
            {
                if ((this.mSimpleSetParams == null))
                {
                    this.mSimpleSetParams = new SimpleSetParams();
                }
                return this.mSimpleSetParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual LetsMakeThisWorkParams LetsMakeThisWorkParams
        {
            get
            {
                if ((this.mLetsMakeThisWorkParams == null))
                {
                    this.mLetsMakeThisWorkParams = new LetsMakeThisWorkParams();
                }
                return this.mLetsMakeThisWorkParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window();
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIValueTextWindow UIValueTextWindow
        {
            get
            {
                if ((this.mUIValueTextWindow == null))
                {
                    this.mUIValueTextWindow = new UIValueTextWindow();
                }
                return this.mUIValueTextWindow;
            }
        }
        
        public UIA2Window UIA2Window
        {
            get
            {
                if ((this.mUIA2Window == null))
                {
                    this.mUIA2Window = new UIA2Window();
                }
                return this.mUIA2Window;
            }
        }
        
        public UISTOOOOPWindow UISTOOOOPWindow
        {
            get
            {
                if ((this.mUISTOOOOPWindow == null))
                {
                    this.mUISTOOOOPWindow = new UISTOOOOPWindow();
                }
                return this.mUISTOOOOPWindow;
            }
        }
        #endregion
        
        #region Fields
        private SimpleSetParams mSimpleSetParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private LetsMakeThisWorkParams mLetsMakeThisWorkParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIValueTextWindow mUIValueTextWindow;
        
        private UIA2Window mUIA2Window;
        
        private UISTOOOOPWindow mUISTOOOOPWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleSet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class SimpleSetParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=B2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=B2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ValueText' text box equals '5'
        /// </summary>
        public string UIValueTextEditText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellName' text box equals 'B2'
        /// </summary>
        public string UICellNameEditText = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LetsMakeThisWork'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class LetsMakeThisWorkParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=D4' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=D4";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellName' text box equals 'D7'
        /// </summary>
        public string UICellNameEditText = "D7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ValueText' text box equals '23'
        /// </summary>
        public string UIValueTextEditText = "23";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIexeShoListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeShoListItem == null))
                {
                    this.mUISpreadsheetGUIexeShoListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIexeShoListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe - Shortcut";
                    this.mUISpreadsheetGUIexeShoListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIexeShoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIexeShoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UICellContentsWindow UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UIAxelWindow UIAxelWindow
        {
            get
            {
                if ((this.mUIAxelWindow == null))
                {
                    this.mUIAxelWindow = new UIAxelWindow(this);
                }
                return this.mUIAxelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsWindow mUICellContentsWindow;
        
        private UIAxelWindow mUIAxelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentsWindow : WinWindow
    {
        
        public UICellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContents";
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                }
                return this.mUICellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelWindow : WinWindow
    {
        
        public UIAxelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIAxelTitleBar UIAxelTitleBar
        {
            get
            {
                if ((this.mUIAxelTitleBar == null))
                {
                    this.mUIAxelTitleBar = new UIAxelTitleBar(this);
                }
                return this.mUIAxelTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAxelTitleBar mUIAxelTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAxelTitleBar : WinTitleBar
    {
        
        public UIAxelTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Value";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIValueClient
        {
            get
            {
                if ((this.mUIValueClient == null))
                {
                    this.mUIValueClient = new WinClient(this);
                }
                return this.mUIValueClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIValueClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIValueTextWindow : WinWindow
    {
        
        public UIValueTextWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Cell";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTextEdit
        {
            get
            {
                if ((this.mUIValueTextEdit == null))
                {
                    this.mUIValueTextEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueTextEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell";
                    #endregion
                }
                return this.mUIValueTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIA2Window : WinWindow
    {
        
        public UIA2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("A2");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("A2");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISTOOOOPWindow : WinWindow
    {
        
        public UISTOOOOPWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "STOOOOP!!!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("STOOOOP!!!");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public WinControl UISTOOOOPDialog
        {
            get
            {
                if ((this.mUISTOOOOPDialog == null))
                {
                    this.mUISTOOOOPDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUISTOOOOPDialog.SearchProperties[UITestControl.PropertyNames.Name] = "STOOOOP!!!";
                    this.mUISTOOOOPDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUISTOOOOPDialog.WindowTitles.Add("STOOOOP!!!");
                    #endregion
                }
                return this.mUISTOOOOPDialog;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private WinControl mUISTOOOOPDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("STOOOOP!!!");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("STOOOOP!!!");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("STOOOOP!!!");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("STOOOOP!!!");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
}
