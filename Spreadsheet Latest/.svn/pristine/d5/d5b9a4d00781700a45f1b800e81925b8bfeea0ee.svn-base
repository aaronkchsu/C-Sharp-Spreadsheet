using SpreadsheetUtilities;
using SS;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SpreadsheetGUI
{


    public partial class Axel : Form
    {

        private Spreadsheet model; // Keeps track of all the data
        string FileLocation; // Used for the save function.. stores last file location
        string V; // For future reference if we want to change the version

        /// <summary>
        /// Our Axel Spreadsheet Needs
        /// </summary>
        public Axel()
        {
            InitializeComponent();
            
            this.Text = FileLocation; // Makes this equal to a file location
            saveToolStripMenuItem.Enabled = false; // Cannot save until this is enabled
            this.KeyPreview = true; // Get Keyboard Input
            spreadsheetPanel1.SelectionChanged += displaySelection; // Sends the displaySelection delegate as the funciton to be called whenever the spreadsheet changes
            spreadsheetPanel1.SetSelection(0 ,1); // These are the cells that start off being selected
            V = "ps6";
            CellName.Text = "A2";
            ValueText.Text = ""; // These are the default settings on how the spreadsheet starts out
            model = new Spreadsheet(s => true, s => s.ToUpper(), V); // Creates a new spread with the versionm ps6
        }

        /// <summary>
        /// Everytime the display is changed in the Spreadsheet panel thsi method is called
        /// </summary>
        /// <param name="ss"></param>
        private void displaySelection(SpreadsheetPanel ss)
        {
            CellContents.Focus(); // Makes sure to focus text to the cell contents text box so that cells recieve input from there
            int row, col; 
            String value;
            ss.GetSelection(out col, out row); // Gets the values of the cell we are currently selecting
            ss.GetValue(col, row, out value); // Gets the value of the items that we are currently selecting
            string name = GetCellName(col, row); // Gets the name of the cell that we want to change
                CellName.Text = name; // Sets the label according to the name it is in
                try
                {
                    ValueText.Text = model.GetCellValue(name).ToString(); // Change the value to the cell if the cursor moves
                    CellContents.Text = model.GetCellContents(name).ToString(); // Switch the Cell Contents if it has been moved
                    CellContents.SelectionStart = CellContents.Text.Length;
                    CellContents.Select(CellContents.Text.Length, 0);
                    ss.SetValue(col, row, model.GetCellValue(name).ToString());
                }
                catch
                {

                }
        }

        /// <summary>
        /// Converts a row and column to a name
        /// </summary>
        /// <param name="col_">Will be a character</param>
        /// <param name="row_"> will end up being a row number</param>
        /// <returns></returns>
        private string GetCellName(int col_, int row_){
            string cellName;
            char column = (Char)(col_ + 65); // Changes to ascii code based on character
            return cellName = column + "" + (row_ + 1);
        }

        /// <summary>
        /// Gets the coordinates based on the name of the cell
        /// </summary>
        /// <param name="name"></param>
        /// <param name="col"></param>
        /// <param name="row"></param>
        private void getCoordinates(string name, out int col, out int row)
        {
            col = (int)name[0] - 65; // Gets the column number
            String num = name.Substring(1);
            double result;
            Double.TryParse(num, out result); 
            row = (int)result - 1; // Gets the row number by index
        }

        /// <summary>
        /// When new is clicked a new GUI form is opend up
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NewMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            DemoApplicationContext.getAppContext().RunForm(new Axel());
        }

        /// <summary>
        /// Whenever the text is changed the cell contents box 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CellContents_TextChanged(object sender, EventArgs e)
        {
            int row, col;
            try // SetContentsOfCell may return errors depending on user input
            {
                getCoordinates(CellName.Text, out col, out row); // Gets the coordinates so that we can change that cell
                spreadsheetPanel1.SetValue(col, row, CellContents.Text); // Sets the value of panel as we type into the contents text box
                model.SetContentsOfCell(CellName.Text, CellContents.Text);
                ValueText.Text = model.GetCellValue(GetCellName(col, row)).ToString(); // Changes the value text b ox to display the correct value
            }
            catch(CircularException) // If it is a circular exception just reset everything
            {
                
            }
            catch
            {

            }
            }

        /// <summary>
        /// This method is called when a key is pressed.. if the key is a enter key then we perform the
        /// compute operations
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CellContents_KeyDown(object sender, KeyEventArgs e)
        
        {
            int row, col;
            spreadsheetPanel1.GetSelection(out col, out row); // Finds out the current position
            if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Right || e.KeyCode == Keys.Left || e.KeyCode == Keys.Down || e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return)
            {
                displaySelection(spreadsheetPanel1); // Changes the data before changing the selection
                switch (e.KeyCode)
                {
                    case Keys.Up:
                        spreadsheetPanel1.SetSelection(col, row - 1); // If up key is pressed move up one space
                        break;
                    case Keys.Down:
                        spreadsheetPanel1.SetSelection(col, row + 1); // If down move one down 
                        break;
                    case Keys.Right:
                        spreadsheetPanel1.SetSelection(col + 1, row);
                        break;
                    case Keys.Left:
                        spreadsheetPanel1.SetSelection(col - 1, row);
                        break;
                    default:
                        break;
                }
                e.SuppressKeyPress = true;
                displaySelection(spreadsheetPanel1); // Change the display on the spreadsheet panel
                if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return) // If enter is pressed dude 
                {
                    try
                    {
                        int row_, col_;
                        getCoordinates(CellName.Text, out col_, out row_); // Gets the coordinates so that we can change that cell
                        model.SetContentsOfCell(CellName.Text, CellContents.Text);
                        spreadsheetPanel1.SetValue(col_, row_, model.GetCellValue(CellName.Text).ToString());
                        spreadsheetPanel1.SetSelection(col_, row_ + 1);
                        displaySelection(spreadsheetPanel1); // Change the display on the spreadsheet panel
                        if (model.GetCellContents(CellName.Text) is FormulaError)
                        {
                            CellContents.Text = "%Invalid";
                            MessageBox.Show("A Formular Error Has Occurred!", "ERROR",
        MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    catch
                    {
                        CellContents.Text = "%Invalid";
                        MessageBox.Show("A 'Circular Dependency' or 'Invalid Operation' has been detected!", "ERROR",
    MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
           
        }

        /// <summary>
        /// With this method we will recalucate
        /// </summary>
        /// <param name="cellsToRecalculate"></param>
        private void recalculateCells(ISet<string> cellsToRecalculate)
        {
            foreach (string name in cellsToRecalculate)
            { // Loops through all the cells to recalculate
                Object change = GetCellContents(name);
                if (change is Formula)
                {
                    Formula f = (Formula)change;
                    ActiveCells[name] = new SpCell(name, f, f.Evaluate(LookupCell)); ; // Recalculates each cell passed in that is needed to be recalculated
                }
            }
        }
        /// <summary>
        /// This is listening for when the save as button is clicked... Once clicked the spreadsheet should
        /// direct it towards a savedialogue box
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveAsToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                saveFileDialog.Filter = "Spreadsheet Files (*.sprd)|*.sprd";
                saveFileDialog.ShowDialog(); // Opens save dialog
                saveToolStripMenuItem.Enabled = false;
            }
            catch
            {

            }
        }

        /// <summary>
        /// Allows the user to choose a location froma dialogue and save the spreadsheet to that file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveFileDialog_FileOk(object sender, CancelEventArgs e)
        {
            FileLocation = saveFileDialog.FileName; // Aquires the name that the user wants to save to
            try // Tries to save the document
            {
                model.Save(FileLocation); // Writes as an XML to the file location
                saveToolStripMenuItem.Enabled = false; // If save successful takes away the save button until a change is made
           
            }
            catch // If saved fails then display error dialoge
            {
                saveToolStripMenuItem.Enabled = false; // If save successful takes away the save button until a change is made
                MessageBox.Show("Your File Could Not Be Saved", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// This is the open file menu when clicked on will open a dialog for the user to choose the file to be opened into the spreadsheet
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog.Filter = "Spreadsheet Files (*.sprd)|*.sprd"; // Filter out on xml documents
            openFileDialog.ShowDialog(); // Shows dialogue to the user

        }
        /// <summary>
        /// Once the user chooses a file then the listener will detect it here and we can open that file to a new spreadsheet
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void openFileDialog_FileOk(object sender, CancelEventArgs e)
        {

                FileLocation = openFileDialog.FileName;
                Spreadsheet opened = new Spreadsheet(FileLocation, s => true, s => s.ToUpper(), "ps6"); // Creates a new spreadsheet according to the file location
                int col_, row_;
                foreach (string name in model.GetNamesOfAllNonemptyCells().ToList())
                { // Get rid of old contents
                    getCoordinates(name, out col_, out row_); // Gets the coordinates of the area
                    spreadsheetPanel1.SetValue(col_, row_, "");
                }
                spreadsheetPanel1.SetSelection(0, 0); // Resets position
                CellName.Text = ""; // Sets the cell text accordin to new spot
                ValueText.Text = ""; // Gets value accordin to the cell content stored in the current spot
                model = opened; // Directs our model to this new data
                int row, col; // coordinates for setting into the spreadsheet
                foreach (string name in opened.GetNamesOfAllNonemptyCells().ToList()) // Gets every name in the cell and then 
                {
                    Object contents = opened.GetCellContents(name); // Gets the contents of each name
                    Object value = opened.GetCellValue(name); // Gets the value so we can set it in areas
                    getCoordinates(name, out col, out row); // Gets the coordinates of the area
                    spreadsheetPanel1.SetValue(col, row, value.ToString());
                    spreadsheetPanel1.SetSelection(col, row);
                    CellName.Text = name; // Sets the cell text accordin to new spot
                    ValueText.Text = value.ToString(); // Gets value accordin to the cell content stored in the current spot
                    CellContents.Text = contents.ToString(); // Switch the Cell Contents if it has been moved
                }

        }

        /// <summary>
        /// If the spreadsheet changes and the saved command has been changed then this option opens up
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try // Tries to save the document
            {
                model.Save(FileLocation); // Writes as an XML to the file location
                saveToolStripMenuItem.Enabled = false; // If save successful takes away the save button until a change is made
            }
            catch // If saved fails then display error dialoge
            {
                saveToolStripMenuItem.Enabled = true; // If not succesful let it go true 
                MessageBox.Show("Your File Could Not Be Saved", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Johnathon, I have a special task for you at hand. This spreadsheet works where you are able to select stuff with your mouse. After you select a cell with your mouse you can type in words with your keyboard. You can enter double values as well as formulas by initilizing the use of the word =. You are aloud to save your document in the file. Also you are able to open files. It is pretty sweet dude. Also some special features are that you can use the arrow buttons to move your cursor. Johnathon this mission is dangerous. If you choose to accept it you may not come back. The spreadsheet may blow up if you are using it wrong so please be careful. Johnathon you are the chosen one. You have been chosen to save the world from bad spreadsheets. More special features include:", "Greetings Good Sir.",
    MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void ValueText_TextChanged(object sender, EventArgs e)
        {

        }

        }
        
    }

