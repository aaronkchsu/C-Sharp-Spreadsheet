using SS;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SpreadsheetGUI
{


    public partial class Axel : Form
    {

        private Spreadsheet model; // Keeps track of all the data
        string FileLocation; // Used for the save function.. stores last file location


        /// <summary>
        /// Our Axel Spreadsheet Needs
        /// </summary>
        public Axel()
        {
            InitializeComponent();
            this.KeyPreview = true; // Get Keyboard Input
            spreadsheetPanel1.SelectionChanged += displaySelection; // Sends the displaySelection delegate as the funciton to be called whenever the spreadsheet changes
            spreadsheetPanel1.SetSelection(0 ,1); // These are the cells that start off being selected
            CellName.Text = "A2";
            ValueText.Text = "";
            model = new Spreadsheet();
        }

        private void displaySelection(SpreadsheetPanel ss)
        {
            CellContents.Focus(); // Makes sure to focus text to the cell contents text box so that cells recieve input from there
            int row, col; 
            String value;
            ss.GetSelection(out col, out row); // Gets the values of the cell we are currently selecting
            ss.GetValue(col, row, out value); // Gets the value of the items that we are currently selecting
            string name = GetCellName(col, row);
            if (name != CellName.Text) // If the cursor has been moved do this
            {
                CellName.Text = name; // Sets the label according to the name it is in
                ValueText.Text = model.GetCellValue(name).ToString(); // Change the value to the cell if the cursor moves
                CellContents.Text = model.GetCellContents(name).ToString(); // Switch the Cell Contents if it has been moved
            }
            else
            {

            }
            
           // if (value != "") // If the item is anything but null string thne we set teh value of the column and move to the next sopt
           // {
                ss.SetValue(col, row, model.GetCellValue(name).ToString());
                //CellContents.Clear(); // Clears the text everytime a change appears in the spreadsheet
           // }
        }

        /// <summary>
        /// Converts a row and column to a name
        /// </summary>
        /// <param name="col_">Will be a character</param>
        /// <param name="row_"> will end up being a row number</param>
        /// <returns></returns>
        private string GetCellName(int col_, int row_){
            string cellName;
            char column = (Char)(col_ + 65); // Changes to ascii code based on character
            return cellName = column + "" + (row_ + 1);
        }

        /// <summary>
        /// Gets the coordinates based on the name of the cell
        /// </summary>
        /// <param name="name"></param>
        /// <param name="col"></param>
        /// <param name="row"></param>
        private void getCoordinates(string name, out int col, out int row)
        {
            col = (int)name[0] - 65; // Gets the column number
            String num = name.Substring(1);
            double result;
            Double.TryParse(num, out result); 
            row = (int)result - 1; // Gets the row number by index
        }


        private void NewMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            DemoApplicationContext.getAppContext().RunForm(new Axel());
        }

        private void CellContents_TextChanged(object sender, EventArgs e)
        {
            int row, col;
            getCoordinates(CellName.Text, out col, out row); // Gets the coordinates so that we can change that cell
            spreadsheetPanel1.SetValue(col, row, CellContents.Text); // Sets the value of panel as we type into the contents text box
            try // SetContentsOfCell may return errors depending on user input
            {
                model.SetContentsOfCell(CellName.Text, CellContents.Text);
                ValueText.Text = model.GetCellValue(GetCellName(col, row)).ToString(); // Changes the value text b ox to display the correct value
            }
            catch
            {
            }
            }

        /// <summary>
        /// This method is called when a key is pressed.. if the key is a enter key then we perform the
        /// compute operations
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CellContents_KeyDown(object sender, KeyEventArgs e)
        {
            int row, col;
            spreadsheetPanel1.GetSelection(out col, out row); // Finds out the current position
            if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Right || e.KeyCode == Keys.Left || e.KeyCode == Keys.Down || e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return)
            {
                spreadsheetPanel1.SetValue(col, row, model.GetCellValue(CellName.Text).ToString()); // Sets the value before moving
                switch (e.KeyCode)
                {
                    case Keys.Up:
                        spreadsheetPanel1.SetSelection(col, row - 1); // If up key is pressed move up one space
                        break;
                    case Keys.Down:
                        spreadsheetPanel1.SetSelection(col, row + 1); // If down move one down 
                        break;
                    case Keys.Right:
                        spreadsheetPanel1.SetSelection(col + 1, row);
                        break;
                    case Keys.Left:
                        spreadsheetPanel1.SetSelection(col - 1, row);
                        break;
                    default:
                        break;

                }
                int ncol, nrow;
                spreadsheetPanel1.GetSelection(out ncol, out nrow); // Sets the cell according to new spot
                string cname = GetCellName(ncol, nrow); // Gets the name
                CellName.Text = cname; // Sets the cell text accordin to new spot
                ValueText.Text = model.GetCellValue(cname).ToString(); // Gets value accordin to the cell content stored in the current spot
                CellContents.Text = model.GetCellContents(cname).ToString(); // Switch the Cell Contents if it has been moved
                displaySelection(spreadsheetPanel1); // Change the display on the spreadsheet panel

                if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return) // If enter is pressed dude 
                {
                    try
                    {
                        int row_, col_;
                        getCoordinates(CellName.Text, out col_, out row_); // Gets the coordinates so that we can change that cell
                        model.SetContentsOfCell(CellName.Text, CellContents.Text);
                        spreadsheetPanel1.SetValue(col_, row_, model.GetCellValue(CellName.Text).ToString());
                        spreadsheetPanel1.SetSelection(col_, row_ + 1);
                        displaySelection(spreadsheetPanel1); // Change the display on the spreadsheet panel
                    }
                    catch
                    {
                        CellContents.Text = "%Invalid";
                        MessageBox.Show("A 'Circular Dependency' or 'Invalid Operation' has been detected!", "ERROR",
    MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
           
        }

        private void saveAsToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            saveFileDialog.Filter = "XML Files (*.xml)|*.xml";
            saveFileDialog.ShowDialog(); // Opens save dialog
        }

        /// <summary>
        /// Allows the user to choose a location froma dialogue and save the spreadsheet to that file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveFileDialog_FileOk(object sender, CancelEventArgs e)
        {
            FileLocation = saveFileDialog.FileName; // Aquires the name that the user wants to save to
            try // Tries to save the document
            {
                model.Save(FileLocation); // Writes as an XML to the file location
                saveToolStripMenuItem.Enabled = false; // If save successful takes away the save button until a change is made
            }
            catch // If saved fails then display error dialoge
            {
                saveToolStripMenuItem.Enabled = false; // If save successful takes away the save button until a change is made
                MessageBox.Show("Your File Could Not Be Saved", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog.Filter = "XML Files (*.xml)|*.xml"; // Filter out on xml documents
            openFileDialog.ShowDialog(); // Shows dialogue to the user
        }
        /// <summary>
        /// Once the user chooses a file then the listener will detect it here and we can open that file to a new spreadsheet
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void openFileDialog_FileOk(object sender, CancelEventArgs e)
        { 
            FileLocation = openFileDialog.FileName;
            Spreadsheet opened = new Spreadsheet(FileLocation, s => true, s => s.ToUpper(), "default"); // Creates a new spreadsheet according to the file location
            model = opened; // Directs our model to this new data
            int row, col; // coordinates for setting into the spreadsheet
            foreach(string name in model.GetNamesOfAllNonemptyCells()) // GEts every name in the cell and then 
            {
                Object contents = opened.GetCellContents(name); // Gets the contents of each name
                getCoordinates(name ,out col, out row); // Gets the coordinates of the area
                spreadsheetPanel1.SetValue(col, row, CellContents.Text);
            }
        }

        }
        
    }

